/**
 * 
 */
package gov.va.oit.vistaevolution.kernel.ws.xqalbutl.endpoints.unit;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.when;
import gov.va.oit.vistaevolution.kernel.ws.xqalbutl.XQALBUTLResponseFactory;
import gov.va.oit.vistaevolution.kernel.ws.xqalbutl.endpoints.XQALBUTLAlertDatEndpointImpl;
import gov.va.oit.vistaevolution.kernel.ws.xqalbutl.model.XQALBUTLAlertDatRequest;
import gov.va.oit.vistaevolution.kernel.ws.xqalbutl.model.XQALBUTLAlertDatResponse;
import gov.va.oit.vistaevolution.util.vistalink.RPCIdentifier;
import gov.va.oit.vistaevolution.utils.vistalink.VistaLinkContextTestParent;
import gov.va.oit.vistaevolution.ws.faults.VistaWebServiceFault;

import java.util.ArrayList;

import org.junit.Test;

/**
 * @author Leisa Martella
 * 
 */
/**
 * XU SOA ALERT
 *
 * This RPC returns information from the ALERT TRACKING (#8992.1) file
 * for the alert XUAID in the array specified by XURET.  If the specified
 * alert is not present, the array root is returned with a NULL value.
 * 
 * Input Variables	
 * 		XUAID:	(required) This is the value XUAID which is the alert identifier.  
 * 				It is passed to the routine or option which is run when the alert 
 * 				is selected.  It can also be obtained from a listing of all of the 
 * 				XUAIDs for a specified user and/or patient.
 * 
 * Response
 * 		Returns data elements at the top level of the ALERT TRACKING (#8992.1)
 * 		file subscripted by the field numbers.  This subscript is sufficient to
 * 		obtain the data.  The values are shown as internal^external if the
 * 		internal and external forms are different.  The next subscript after
 * 		the field number will provide the field names if they are desired.  Use
 * 		XQALERTD as the return root to simulate calling the API with a null
 * 		root.
 *		
 *		array(.01)="NO-ID;83194;3140107.141502"
 *		array(.01,"NAME")=""
 *		array(.02)="3140107.141502^JAN 07, 2014@14:15:02"
 *		array(.02,"DATE CREATED")=""
 *		array(.03)="NO-ID"
 *		array(.03,"PKG ID")=""
 *		array(.04)=""
 *		array(.04,"PATIENT")=""
 * 
 */
public class XQALBUTLAlertDatTest extends VistaLinkContextTestParent {
	/**
	 *
	 * >S XURET="",XUAID="LA7-MESSAGE-416570;.5;3030226.111106"
	 * 
	 * >D ALERTR^XUSOAR(XURET,XUAID)
	 * 
	 * >ZW XURET
	 * XURET(.01)="LA7-MESSAGE-416570;.5;3030226.111106"
	 * XURET(.01,"NAME")=""
	 * XURET(.02)="3030226.111106^FEB 26, 2003@11:11:06"
	 * XURET(.02,"DATE CREATED")=""
	 * XURET(.03)="LA7-MESSAGE-416570"
	 * XURET(.03,"PKG ID")=""
	 * XURET(.04)=""
	 * XURET(.04,"PATIENT")=""
	 * XURET(.05)=".5^POSTMASTER"
	 * XURET(.05,"GENERATED BY")=""
	 * XURET(.06)="1^YES"
	 * XURET(.06,"GENERATED WHILE QUEUED")=""
	 * XURET(.07)=""
	 * XURET(.07,"STATUS")=""
	 * XURET(.08)=""
	 * XURET(.08,"RETENTION DATE")=""
	 * XURET(1.01)="Lab Messaging error #37 on message #416570"
	 * XURET(1.01,"DISPLAY TEXT")=""
	 * XURET(1.02)=""
	 * XURET(1.02,"OPTION FOR PROCESSING")=""
	 * XURET(1.03)="DIS"
	 * XURET(1.03,"ROUTINE TAG")=""
	 * XURET(1.04)="LA7UXQA"
	 * XURET(1.04,"ROUTINE FOR PROCESSING")=""
	 * XURET(2)=416570
	 * XURET(2,"DATA FOR PROCESSING")=""
	 * XURET(3.01)=""
	 * XURET(3.01,"GUID FOR GUI")=""
	 * XURET(4)=""
	 * XURET(4,"LONG INFO TEXT")=""
	 *
	 */

	@Test
	//TODO: Setup Test Case when reported RPC issues are resolved (Leisa)
	public void testAlertDat() throws VistaWebServiceFault {
		ArrayList <String> results = new ArrayList <String>();
		results.add("LA7-MESSAGE-416570;.5;3030226.111106");

		String testResponse = "LA7-MESSAGE-416570;.5;3030226.111106\n"; 
//				+ "\n" 
//				+ "\n";

		// Use Mockito to set up vistaLinkContext from parent class to return
		// proper string.
		when(this.getVistaLinkContext().makeRPCCall(new RPCIdentifier(""), null)).thenReturn(
				testResponse);

		// Setup the endpoint for testing.
		XQALBUTLAlertDatEndpointImpl service = new XQALBUTLAlertDatEndpointImpl(
				getVistaLinkContext(), new XQALBUTLResponseFactory());

		XQALBUTLAlertDatRequest request = new XQALBUTLAlertDatRequest();

		// Execute request against mocked object backend.
		request.setXuaID("LA7-MESSAGE-416570;.5;3030226.111106");

		XQALBUTLAlertDatResponse response = service.alertDat(request);

		assertNotNull(response);
		assertEquals(results.get(0), response.getDataList().get(0));
	}
}
